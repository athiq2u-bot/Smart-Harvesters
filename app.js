// --- UI Element References ---
const onboardingModal = document.getElementById("onboardingModal");
const onboardingForm = document.getElementById("onboardingForm");
const loginModal = document.getElementById("loginModal");
const loginForm = document.getElementById("loginForm");
const loginBtn = document.getElementById("loginBtn");
const signupBtn = document.getElementById("signupBtn");
const heroSignupBtn = document.getElementById("heroSignupBtn");
const navLinks = document.querySelector(".nav-links");
const navDashboardLink = document.getElementById("navDashboardLink");

const logoutBtn = document.getElementById("logoutBtn");
const logoutBtnApp = document.getElementById("logoutBtnApp");

const languageSelectorDashboard = document.getElementById('languageSelectorDashboard');
const languageSelectorAi = document.getElementById('languageSelectorAi');
const allPages = document.querySelectorAll(".page");

// ADDED reference for floating CTA
const floatingAiCta = document.getElementById('floatingAiCta');

// --- API Keys (Note: Using AIza key format as instructed for client-side) ---
// Placeholder key. Replace with a real, client-safe key to enable Gemini chat.
const GEMINI_API_KEY = 'AIzaSyCbdhnXy1JqSlhLTdOVNMb643AmQs4lOaw'; 
const GEMINI_TEXT_MODEL = 'gemini-2.5-flash-preview-05-20';
// --- Localization Data ---
const LOCALE_DATA = {
    'hi': {
        'severe_tag': 'рдЕрддрд┐ рдЖрд╡рд╢реНрдпрдХ', 'warning_tag': 'рдЪреЗрддрд╛рд╡рдиреА', 'info_tag': 'рдЬрд╛рдирдХрд╛рд░реА',
        'alert_1': 'рдЕрдЧрд▓реЗ 24 рдШрдВрдЯреЛрдВ рдХреЗ рд▓рд┐рдП рднрд╛рд░реА рд╡рд░реНрд╖рд╛ рдХреА рдЪреЗрддрд╛рд╡рдиреАред рдЙрдЪрд┐рдд рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред',
        'alert_2': 'рд╕рдВрднрд╛рд╡рд┐рдд рдХреАрдЯ рд╕рдВрдХреНрд░рдордгред рддрддреНрдХрд╛рд▓ рдирд┐рд░реАрдХреНрд╖рдг рдХреЗ рд▓рд┐рдП рдкрддреНрддреА рдХреЗ рдирд┐рдЪрд▓реЗ рд╣рд┐рд╕реНрд╕реЗ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВред',
        'alert_3': 'рдирдИ рд╕рд░рдХрд╛рд░реА рд╕рдмреНрд╕рд┐рдбреА рдпреЛрдЬрдирд╛ рдХреА рдШреЛрд╖рдгрд╛ рдХреА рдЧрдИ рд╣реИред',
        'stages': { 'Sowing': 'рдмреБрд╡рд╛рдИ', 'Vegetative Growth': 'рд╡рдирд╕реНрдкрддрд┐ рд╡реГрджреНрдзрд┐', 'Flowering': 'рдлреВрд▓рдирд╛', 'Harvesting': 'рдХрдЯрд╛рдИ' },
        'stress_level': { 'Optimal': 'рдЗрд╖реНрдЯрддрдо', 'Mild Stress': 'рд╣рд▓реНрдХрд╛ рддрдирд╛рд╡', 'Severe Stress': 'рдЧрдВрднреАрд░ рддрдирд╛рд╡' },
        'sell_advice': { 'Best time to sell:': 'рдмреЗрдЪрдиреЗ рдХрд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп:', 'Sell now for best margin': 'рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рд▓рд╛рдн рдХреЗ рд▓рд┐рдП рдЕрднреА рдмреЗрдЪреЗрдВ', 'Hold for 3 more days': '3 рдФрд░ рджрд┐рдиреЛрдВ рдХреЗ рд▓рд┐рдП рд░реЛрдХреЗрдВ', 'Market price is low': 'рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп рдХрдо рд╣реИ' }
    },
    'ta': {
        'severe_tag': 'рооро┐роХ роЕро╡роЪро░роорпН', 'warning_tag': 'роОроЪрпНроЪро░ро┐роХрпНроХрпИ', 'info_tag': 'родроХро╡ро▓рпН',
        'alert_1': 'роЕроЯрпБродрпНрод 24 роорогро┐ роирпЗро░родрпНродро┐ро▒рпНроХрпБ рокро▓родрпНрод рооро┤рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИ. роЪро░ро┐ропро╛рой ро╡роЯро┐роХро╛ро▓рпН роЗро░рпБрокрпНрокродрпИ роЙро▒рпБродро┐ роЪрпЖропрпНропро╡рпБроорпН.',
        'alert_2': 'роЪро╛родрпНродро┐ропрооро╛рой рокрпВроЪрпНроЪро┐ родро╛роХрпНроХрпБродро▓рпН. роЙроЯройроЯро┐ропро╛роХ рокро░ро┐роЪрпЛродройрпИ роЪрпЖропрпНроп роЗро▓рпИроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроХрпБродро┐ропрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН.',
        'alert_3': 'рокрпБродро┐роп роЕро░роЪрпБ рооро╛ройро┐ропродрпН родро┐роЯрпНроЯроорпН роЕро▒ро┐ро╡ро┐роХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.',
        'stages': { 'Sowing': 'ро╡ро┐родрпИрокрпНрокрпБ', 'Vegetative Growth': 'родро╛ро╡ро░ ро╡ро│ро░рпНроЪрпНроЪро┐', 'Flowering': 'рокрпВроХрпНроХрпБроорпН', 'Harvesting': 'роЕро▒рпБро╡роЯрпИ' },
        'stress_level': { 'Optimal': 'роЙроХроирпНродродрпБ', 'Mild Stress': 'ро▓рпЗроЪро╛рой роЕро┤рпБродрпНродроорпН', 'Severe Stress': 'роХроЯрпБроорпИропро╛рой роЕро┤рпБродрпНродроорпН' },
        'sell_advice': { 'Best time to sell:': 'ро╡ро┐ро▒рпНроХ роЪро┐ро▒роирпНрод роирпЗро░роорпН:', 'Sell now for best margin': 'роЪро┐ро▒роирпНрод ро▓ро╛рокродрпНродро┐ро▒рпНроХрпБ роЗрокрпНрокрпЛродрпЗ ро╡ро┐ро▒рпНроХро╡рпБроорпН', 'Hold for 3 more days': 'роорпЗро▓рпБроорпН 3 роиро╛роЯрпНроХро│рпБроХрпНроХрпБ ро╡рпИродрпНродро┐ро░рпБроХрпНроХро╡рпБроорпН', 'Market price is low': 'роЪроирпНродрпИ ро╡ро┐ро▓рпИ роХрпБро▒рпИро╡ро╛роХ роЙро│рпНро│родрпБ' }
    },
    'ma': {
        'severe_tag': 'р┤Ер┤др╡Нр┤пр┤╛р┤╡р┤╢р╡Нр┤пр┤В', 'warning_tag': 'р┤ор╡Бр┤ир╡Нр┤ир┤▒р┤┐р┤пр┤┐р┤кр╡Нр┤кр╡Н', 'info_tag': 'р┤╡р┤┐р┤╡р┤░р┤В',
        'alert_1': 'р┤Ер┤Яр╡Бр┤др╡Нр┤д 24 р┤ор┤гр┤┐р┤Хр╡Нр┤Хр╡Вр┤▒р┤┐р┤ир╡Бр┤│р╡Нр┤│р┤┐р╡╜ р┤Хр┤ир┤др╡Нр┤д р┤ор┤┤р┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤╕р┤╛р┤зр╡Нр┤пр┤д. р┤╢р┤░р┤┐р┤пр┤╛р┤п р┤ир╡Ар╡╝р┤╡р┤╛р╡╝р┤Ър╡Нр┤Ъ р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤Хр╡Нр┤Хр╡Бр┤Х.',
        'alert_2': 'р┤Хр╡Ар┤Яр┤мр┤╛р┤зр┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤╕р┤╛р┤зр╡Нр┤пр┤др┤пр╡Бр┤гр╡Нр┤Яр╡Н. р┤Йр┤Яр┤ир┤Яр┤┐ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤ир┤пр╡Нр┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤Зр┤▓р┤Хр┤│р╡Бр┤Яр╡Ж р┤Ер┤Яр┤┐р┤нр┤╛р┤Чр┤В р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.',
        'alert_3': 'р┤кр╡Бр┤др┤┐р┤п р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤╕р┤мр╡Нр┤╕р┤┐р┤бр┤┐ р┤кр┤жр╡Нр┤зр┤др┤┐ р┤кр╡Нр┤░р┤Цр╡Нр┤пр┤╛р┤кр┤┐р┤Ър╡Нр┤Ър╡Б.',
        'stages': { 'Sowing': 'р┤╡р┤┐р┤др╡Нр┤др╡Н р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр╡╜', 'Vegetative Growth': 'р┤╕р┤╕р╡Нр┤п р┤╡р┤│р╡╝р┤Ър╡Нр┤Ъ', 'Flowering': 'р┤кр╡Бр┤╖р╡Нр┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡╜', 'Harvesting': 'р┤╡р┤┐р┤│р┤╡р╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н' },
        'stress_level': { 'Optimal': 'р┤Тр┤кр╡Нр┤▒р╡Нр┤▒р┤┐р┤ор╡╜', 'Mild Stress': 'р┤ор┤┐р┤др┤ор┤╛р┤п р┤Хр╡Нр┤╖р┤╛р┤ор┤В', 'Severe Stress': 'р┤Хр┤ар┤┐р┤ир┤ор┤╛р┤п р┤Хр╡Нр┤╖р┤╛р┤ор┤В' },
        'sell_advice': { 'Best time to sell:': 'р┤╡р┤┐р╡╜р┤Хр╡Нр┤Хр┤╛р╡╗ р┤кр┤▒р╡Нр┤▒р┤┐р┤п р┤╕р┤ор┤пр┤В:', 'Sell now for best margin': 'р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤▓р┤╛р┤нр┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤Зр┤кр╡Нр┤кр╡Лр╡╛ р┤╡р┤┐р╡╜р┤Хр╡Нр┤Хр╡Бр┤Х', 'Hold for 3 more days': 'р┤Хр╡Вр┤Яр╡Бр┤др╡╜ 3 р┤жр┤┐р┤╡р┤╕р┤др╡Нр┤др╡Зр┤Хр╡Нр┤Хр╡Н р┤ир┤┐р╡╝р┤др╡Нр┤др╡Бр┤Х', 'Market price is low': 'р┤╡р┤┐р┤кр┤гр┤┐ р┤╡р┤┐р┤▓ р┤Хр╡Бр┤▒р┤╡р┤╛р┤гр╡Н' }
    },
    'en': {
        'severe_tag': 'URGENT', 'warning_tag': 'WARNING',
        'info_tag': 'INFO',
        'alert_1': 'Heavy rainfall warning for the next 24 hours. Ensure proper drainage.',
        'alert_2': 'Possible pest infestation. Check the underside of leaves for immediate inspection.',
        'alert_3': 'New government subsidy program announced.',
        'stages': { 'Sowing': 'Sowing', 'Vegetative Growth': 'Vegetative Growth', 'Flowering': 'Flowering', 'Harvesting': 'Harvesting' },
        'stress_level': { 'Optimal': 'Optimal', 'Mild Stress': 'Mild Stress', 'Severe Stress': 'Severe Stress' },
        'sell_advice': { 'Best time to sell:': 'Best Time to Sell:', 'Sell now for best margin': 'Sell now for best margin', 'Hold for 3 more days': 'Hold for 3 more days', 'Market price is low': 'Market price is low' }
    }
};

// --- Mock Data for Dashboard (Comprehensive) ---
const DEMO_DATA = {
    weather: {
        temp: '29┬░C', condition: 'Partly Cloudy', humidity: '68%', wind: '12 km/h SW', rain: '0.8 mm', sunrise: '06:12 AM', sunset: '06:45 PM',
        forecast: [{ day: 'Mon', icon: 'тШАя╕П', temp: '30┬░C' }, { day: 'Tue', icon: 'ЁЯМжя╕П', temp: '28┬░C' }, { day: 'Wed', icon: 'ЁЯМзя╕П', temp: '27┬░C' }, { day: 'Thu', icon: 'тЫЕ', temp: '29┬░C' }, { day: 'Fri', icon: 'тШАя╕П', temp: '31┬░C' }]
    },
    market: {
        price: 'тВ╣2,150/quintal', 
        chart: [2100, 2150, 2120, 2180, 2200, 2150, 2170], // Last 7 days price trend
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        sellAdviceKey: 1 // 1: Sell now (today), 2: Hold (price will rise), 3: Low (price fell)
    },
    soil: {
        npk: 'N: 120, P: 60, K: 80', ph: '6.7',
        water: {
            moistureVWC: 35, // Volumetric Water Content (in %)
            wiltingPoint: 20, // Threshold for severe stress
            fieldCapacity: 45, // Threshold for overwatering
        },
        chart: [6.5, 6.6, 6.7, 6.8, 6.7, 6.6, 6.7],
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    },
    crop: {
        daysSinceSowing: 42,
        stage: 'Flowering', // English key used for lookup
        progress: 65,
        yield: '3.2 tons/acre'
    },
    tips: [
        'Mulch your crops to retain soil moisture during hot days.',
        'Inspect your crops regularly for early signs of pests or disease.',
        'Irrigate early in the morning to reduce water loss from evaporation.',
        'Rotate crops each season to improve soil health and reduce pests.',
        'Test your soil pH every 3 months for optimal nutrient uptake.',
        'Use organic compost to boost soil fertility naturally.',
        'Keep farm records to track yield and input costs for better planning.'
    ],
    // ADDED data for full Crop Library (used in initializeCropLibrary)
    cropLibrary: [
        { name: "Rice", emoji: "ЁЯМ╛", description: "A staple crop. Learn about cultivation, pests, and harvest cycles for rice." },
        { name: "Maize", emoji: "ЁЯМ╜", description: "A comprehensive guide to growing healthy maize crops." },
        { name: "Potatoes", emoji: "ЁЯеФ", description: "Tips for planting, managing, and harvesting potatoes." },
        { name: "Soybeans", emoji: "ЁЯМ▒", description: "An in-depth guide to growing protein-rich soybeans." },
        { name: "Coconut", emoji: "ЁЯее", description: "Kerala's iconic crop. Tips on palm management, pests, and yield optimization." },
        { name: "Rubber", emoji: "ЁЯМ│", description: "Information on tapping techniques, disease control, and soil management for rubber plantations." },
        { name: "Cardamom", emoji: "ЁЯМ╢я╕П", description: "A high-value spice crop. Learn about shade management and irrigation for optimal growth." },
        { name: "Tea", emoji: "ЁЯН╡", description: "Tips for pruning, plucking, and maintaining soil pH for robust tea gardens." }
    ],
    // ADDED data for full Resources section (used in initializeResources)
    resources: [
        { title: "Government Subsidies", emoji: "ЁЯТ░", description: "Information on farming subsidies and financial aid programs.", linkText: "Learn More" },
        { title: "Soil Testing Labs", emoji: "ЁЯзк", description: "Find accredited soil testing laboratories near you.", linkText: "Find a Lab" },
        { title: "Market Price Data", emoji: "ЁЯУИ", description: "Get real-time updates on commodity market prices.", linkText: "View Prices" },
        { title: "Community Forum", emoji: "ЁЯТм", description: "Connect with other farmers to share tips and ask questions.", linkText: "Join Community" },
        { title: "Pest & Disease Diagnosis", emoji: "ЁЯУ╕", description: "Upload a photo of your crop to get an instant diagnosis.", linkText: "Diagnose Now", pageId: "diagnosis-page" }
    ],
    diagnosis: {
        Rice: {
            Pest: { name: "Brown Plant Hopper (BPH)", summary: "BPH causes 'hopperburn,' leading to complete crop failure if severe.", treatment: ["Apply Neem oil 3ml/L of water.", "Introduce natural predators (spider/mirid bugs).", "Maintain optimal drainage to avoid water stagnation."] },
            Disease: { name: "Rice Blast (Magnaporthe oryzae)", summary: "Fungal disease causing diamond-shaped lesions. Very common during flowering.", treatment: ["Apply Fungicide (Tricyclazole) immediately.", "Avoid excessive nitrogen fertilizer.", "Use blast-resistant varieties for the next season."] }
        },
        Default: { name: "Nutrient Deficiency (Nitrogen)", summary: "The lower leaves are turning yellow/pale, indicating lack of Nitrogen, common in the vegetative stage.", treatment: ["Apply Urea (20kg/acre) immediately via foliar spray.", "Ensure adequate soil moisture to facilitate nutrient uptake.", "Perform a soil test for a long-term plan."] }
    }
};

// ----------------------------------------------------------------------
// --- CORE LOGIC: TEXT-TO-SPEECH (TTS) UTILITIES ---
// ----------------------------------------------------------------------

// Helper to convert base64 audio data to ArrayBuffer
function base64ToArrayBuffer(base64) {
    const binaryString = atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
}

// Helper to convert PCM audio data (from API) into a playable WAV Blob
function pcmToWav(pcmData, sampleRate) {
    const buffer = new ArrayBuffer(44 + pcmData.length * 2);
    const view = new DataView(buffer);

    // Helper function to write strings
    function writeString(view, offset, string) {
        for (let i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    }

    // RIFF identifier
    writeString(view, 0, 'RIFF');
    // File length
    view.setUint32(4, 36 + pcmData.length * 2, true);
    // WAVE identifier
    writeString(view, 8, 'WAVE');
    // fmt chunk identifier
    writeString(view, 12, 'fmt ');
    // Format chunk length
    view.setUint32(16, 16, true);
    // Sample format (raw pcm)
    view.setUint16(20, 1, true);
    // Channel count
    view.setUint16(22, 1, true);
    // Sample rate
    view.setUint32(24, sampleRate, true);
    // Byte rate (SampleRate * ChannelCount * BitsPerSample/8)
    view.setUint32(28, sampleRate * 1 * 2, true);
    // Block align (ChannelCount * BitsPerSample/8)
    view.setUint16(32, 1 * 2, true);
    // Bits per sample
    view.setUint16(34, 16, true);
    // data chunk identifier
    writeString(view, 36, 'data');
    // Data chunk length
    view.setUint32(40, pcmData.length * 2, true);

    // Write PCM data
    let offset = 44;
    for (let i = 0; i < pcmData.length; i++) {
        view.setInt16(offset, pcmData[i], true);
        offset += 2;
    }

    return new Blob([view], { type: 'audio/wav' });
}

const VOICE_MAP = {
    'en': { voiceName: 'Kore', langCode: 'en-US' },
    'hi': { voiceName: 'Kore', langCode: 'hi-IN' }, 
    'ta': { voiceName: 'Despina', langCode: 'ta-IN' },
    'ma': { voiceName: 'Charon', langCode: 'en-US' } 
};

async function getTtsAudio(text, lang) {
    const config = VOICE_MAP[lang] || VOICE_MAP['en'];
    const systemPrompt = `Speak the following text in a friendly, informative tone, maintaining an appropriate regional accent (Indian English, Hindi, Tamil, or Malayalam) as the AI farming assistant Vera.`;
    
    // Remove strong tags before TTS conversion
    const cleanText = text.replace(/<\/?strong>/g, '');

    const payload = {
        contents: [{
            parts: [{ text: cleanText }]
        }],
        generationConfig: {
            responseModalities: ["AUDIO"],
            speechConfig: {
                voiceConfig: {
                    prebuiltVoiceConfig: { voiceName: config.voiceName }
                }
            }
        },
        systemInstruction: {
            parts: [{ text: systemPrompt }]
        }
    };
    
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${GEMINI_API_KEY}`;
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            throw new Error(`TTS API error: ${response.status} - ${response.statusText}`);
        }

        const result = await response.json();
        const part = result?.candidates?.[0]?.content?.parts?.[0];
        const audioData = part?.inlineData?.data;
        const mimeType = part?.inlineData?.mimeType;

        if (audioData && mimeType && mimeType.startsWith("audio/L16")) {
            const match = mimeType.match(/rate=(\d+)/);
            const sampleRate = match ? parseInt(match[1], 10) : 16000;
            
            const pcmDataBuffer = base64ToArrayBuffer(audioData);
            const pcm16 = new Int16Array(pcmDataBuffer);
            const wavBlob = pcmToWav(pcm16, sampleRate);
            
            return URL.createObjectURL(wavBlob);
        } else {
            console.error("TTS response missing valid audio data or mime type.", mimeType);
            return null;
        }

    } catch (error) {
        console.error("TTS error:", error);
        return null;
    }
}


// ----------------------------------------------------------------------
// --- CORE LOGIC: LOCALIZATION ---
// ----------------------------------------------------------------------

/**
 * Dynamically updates all localized content on the page based on the selected language.
 * @param {string} lang The language code ('en', 'hi', 'ta', 'ma').
 */
function updateContentLanguage(lang) {
    const locale = LOCALE_DATA[lang] || LOCALE_DATA['en'];
    const profile = JSON.parse(localStorage.getItem("smartHarvestersProfile")) || { crop: 'crop' };
    const cropName = profile.crop;

    // 1. Update text content for elements with data attributes
    document.querySelectorAll('[data-en]').forEach(element => {
        const newText = element.getAttribute(`data-${lang}`) || element.getAttribute('data-en');
        if (element.tagName === 'INPUT' && (element.type === 'text' || element.type === 'password')) {
            element.placeholder = newText;
        } else if (element.tagName === 'A' || element.tagName === 'BUTTON') {
            // Check if content is dynamic before overwriting
            if (!element.classList.contains('btn-logout') && !element.classList.contains('nav-links')) {
                 element.textContent = newText;
            }
        } else if (newText) {
             // Handle elements like h1, p
             const span = element.querySelector('span');
             if (span) {
                 // Preserve inner span if it exists (e.g., icons, values)
                 element.childNodes[0].nodeValue = newText.trim().replace(/\s*$/, ' ');
             } else {
                 element.textContent = newText;
             }
        }
    });

    // 2. Update descriptive labels (e.g., "Temperature: X")
    document.querySelectorAll('[data-en-label]').forEach(element => {
        const labelAttr = `data-${lang}-label`;
        const labelText = element.getAttribute(labelAttr);
        if (labelText) {
            const span = element.querySelector('span');
            // Set the label text while preserving the span content
            element.childNodes[0].nodeValue = `${labelText}: `;
            if (span) element.appendChild(span); 
        }
    });

    // 3. Update Alerts & Advisories
    const alertsList = document.getElementById('alertsList');
    if (alertsList) {
        alertsList.innerHTML = `
            <li><span class="alert-tag severe">${locale.severe_tag}</span> ${locale.alert_1}</li>
            <li><span class="alert-tag moderate">${locale.warning_tag}</span> ${locale.alert_2}</li>
            <li><span class="alert-tag info">${locale.info_tag}</span> ${locale.alert_3} ${lang !== 'en' ? cropName + ' ' : ''} farmers.</li>
        `;
    }

    // 4. Update dynamic content from DEMO_DATA that uses localization keys
    const stageElement = document.getElementById('cropStage');
    if (stageElement) {
        const stageKey = DEMO_DATA.crop.stage;
        const stageLabel = stageElement.getAttribute(`data-${lang}-label`);
        const translatedStage = locale.stages[stageKey] || stageKey;
        stageElement.textContent = `${stageLabel}: ${translatedStage}`;
    }
    
    // 5. Update Water Stress Level
    const stressLevelElement = document.getElementById('waterStressLevel');
    if(stressLevelElement) {
        const currentStressKey = stressLevelElement.getAttribute('data-stress-key') || 'Optimal';
        const stressLabel = stressLevelElement.closest('p').getAttribute(`data-${lang}-label`);
        const translatedStress = locale.stress_level[currentStressKey] || currentStressKey;
        stressLevelElement.textContent = translatedStress;
        // Re-apply label to parent <p>
        stressLevelElement.closest('p').childNodes[0].nodeValue = `${stressLabel}: `;
        stressLevelElement.closest('p').appendChild(stressLevelElement);
    }

    // 6. Update Market Advice
    const sellAdviceElement = document.getElementById('sellAdvice');
    if(sellAdviceElement) {
        const adviceKey = sellAdviceElement.getAttribute('data-advice-key');
        let adviceText = '';
        if (adviceKey == 1) adviceText = locale.sell_advice['Sell now for best margin'];
        else if (adviceKey == 2) adviceText = locale.sell_advice['Hold for 3 more days'];
        else adviceText = locale.sell_advice['Market price is low'];
        sellAdviceElement.textContent = adviceText;
    }


    // 7. Sync language selectors
    if (languageSelectorDashboard && languageSelectorDashboard.value !== lang) languageSelectorDashboard.value = lang;
    if (languageSelectorAi && languageSelectorAi.value !== lang) languageSelectorAi.value = lang;

    localStorage.setItem('currentLanguage', lang);
}

// ----------------------------------------------------------------------
// --- CORE LOGIC: NAVIGATION & AUTHENTICATION ---
// ----------------------------------------------------------------------

function showPage(pageId) {
    // If navigating away from AI page, stop any ongoing TTS
    if (document.getElementById('ai-page').classList.contains('active') && window.currentPlayingAudio) {
        window.currentPlayingAudio.pause();
        window.currentPlayingAudio = null;
    }
    
    allPages.forEach(page => page.classList.remove('active'));
    
    const targetPage = document.getElementById(pageId);
    if (targetPage) {
        targetPage.classList.add('active');
        const currentLang = localStorage.getItem('currentLanguage') || 'en';
        
        // Initialize specific page contents
        if (pageId === 'dashboard-page') {
            initializeDashboard();
        } else if (pageId === 'ai-page') {
            initializeAiAssistant();
        } else if (pageId === 'diagnosis-page') {
            document.getElementById('fileInputDiagnosis').value = '';
            document.getElementById('imagePreview').style.display = 'none';
            document.getElementById('diagnosisResult').style.display = 'none';
            document.getElementById('diagnosisLoading').style.display = 'none';
            document.getElementById('diagnosisPlaceholder').style.display = 'block';
        } else if (pageId === 'crop-library-page') {
             initializeCropLibrary();
        } else if (pageId === 'resources-page') {
             initializeResources();
        }
        
        // Always apply language after loading content
        updateContentLanguage(currentLang);
    }
}

function showHomepageSection(sectionId) {
    showPage('homepage');
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
        // Clear error message when closing login modal
        if (modalId === 'loginModal') {
            const loginError = document.getElementById('loginError');
            if (loginError) loginError.style.display = 'none';
        }
    }
}

// Auth handlers are standard
function handleSignUp(e) {
    e.preventDefault();
    const farmerProfile = {
        name: document.getElementById("farmerName").value,
        crop: document.getElementById("farmerCrop").value,
        location: document.getElementById("farmerLocation").value,
        area: document.getElementById("farmerArea").value,
        sowingDate: document.getElementById("sowingDate").value
    };
    localStorage.setItem("smartHarvestersProfile", JSON.stringify(farmerProfile));
    localStorage.setItem('isLoggedIn', 'true');
    onboardingModal.classList.remove("active");
    checkUserSession();
}

function handleLogin(e) {
    e.preventDefault();
    const username = document.getElementById('loginUsername').value;
    const password = document.getElementById('loginPassword').value;
    const mockUsers = { 'farmer': 'pass', 'aman': '12345', 'sita': 'securepass' };
    const loginError = document.getElementById('loginError');
    
    if (mockUsers[username] && mockUsers[username] === password) {
        localStorage.setItem('isLoggedIn', 'true');
        loginModal.classList.remove('active');
        if (loginError) loginError.style.display = 'none';
        
        // Set default profile if logging in without one (e.g., first time mock login)
        if (!localStorage.getItem("smartHarvestersProfile")) {
            localStorage.setItem("smartHarvestersProfile", JSON.stringify({
                name: username, crop: "Rice", location: "Kerala, India", area: "3", sowingDate: "2024-10-01"
            }));
        }
        checkUserSession();
    } else {
        if (loginError) loginError.style.display = 'block';
    }
}

function handleLogout(e) {
    e.preventDefault();
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('smartHarvestersProfile');
    checkUserSession();
    showPage('homepage');
}

function checkUserSession() {
    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
    const hasProfile = localStorage.getItem('smartHarvestersProfile');

    // Update UI element visibility
    if (loginBtn) loginBtn.style.display = isLoggedIn ? 'none' : 'block';
    if (signupBtn) signupBtn.style.display = isLoggedIn ? 'none' : 'block';
    if (heroSignupBtn) heroSignupBtn.style.display = isLoggedIn ? 'none' : 'block';
    if (logoutBtn) logoutBtn.style.display = isLoggedIn ? 'block' : 'none';
    if (logoutBtnApp) logoutBtnApp.style.display = isLoggedIn ? 'block' : 'none';
    if (navDashboardLink) navDashboardLink.style.display = isLoggedIn ? 'block' : 'none';

    // NEW: Control visibility of the floating CTA
    if (floatingAiCta) {
        const showCta = isLoggedIn && hasProfile;
        floatingAiCta.style.display = showCta ? 'flex' : 'none';
    }

    if (isLoggedIn && hasProfile && document.getElementById('homepage').classList.contains('active')) {
         showPage('dashboard-page');
    } else if (isLoggedIn && !hasProfile) {
         onboardingModal.classList.add('active');
         showPage('homepage');
    }
    
    // Reapply language on UI state change
    updateContentLanguage(localStorage.getItem('currentLanguage') || 'en');
}

// ----------------------------------------------------------------------
// --- CORE LOGIC: DASHBOARD INITIALIZATION ---
// ----------------------------------------------------------------------

function initializeDashboard() {
    const farmerProfile = JSON.parse(localStorage.getItem("smartHarvestersProfile")) || {
        name: "Demo Farmer", crop: "Rice", location: "Thrissur, Kerala", area: "2.5", sowingDate: "2025-08-01"
    };
    const currentLang = localStorage.getItem('currentLanguage') || 'en';
    const locale = LOCALE_DATA[currentLang];

    // 1. Update Farm Details
    document.getElementById('farmDetails').textContent = `${farmerProfile.name}'s Farm (${farmerProfile.crop}, ${farmerProfile.area} acres)`;

    // 2. Weather
    const weatherData = DEMO_DATA.weather;
    document.getElementById('currentTemp').textContent = weatherData.temp;
    document.getElementById('currentCondition').textContent = weatherData.condition;
    document.getElementById('currentHumidity').textContent = weatherData.humidity;
    document.getElementById('weatherWind').textContent = weatherData.wind;
    document.getElementById('weatherRain').textContent = weatherData.rain;
    document.getElementById('weatherSunrise').textContent = weatherData.sunrise;
    document.getElementById('weatherSunset').textContent = weatherData.sunset;
    const forecastList = document.getElementById('forecastList');
    if (forecastList) {
        forecastList.innerHTML = weatherData.forecast.map(day => 
            `<li><span class="emoji">${day.icon}</span> ${day.day}: ${day.temp}</li>`
        ).join('');
    }

    // 3. Water Stress & Irrigation
    const moisture = DEMO_DATA.soil.water.moistureVWC;
    const wilting = DEMO_DATA.soil.water.wiltingPoint;
    const capacity = DEMO_DATA.soil.water.fieldCapacity;
    let stressKey;
    let adviceText;

    if (moisture < wilting + 5) {
        stressKey = 'Severe Stress';
        adviceText = `URGENT: Initiate irrigation within 3 hours. Current moisture (${moisture}%) is critically low.`;
    } else if (moisture < capacity - 10) {
        stressKey = 'Mild Stress';
        adviceText = `Water is adequate, but trending low. Schedule irrigation in the next 24 hours.`;
    } else {
        stressKey = 'Optimal';
        adviceText = `Soil moisture is optimal (${moisture}%). No irrigation needed. Monitor forecast.`;
    }

    document.getElementById('soilMoisture').textContent = `${moisture}%`;
    const stressLevelElement = document.getElementById('waterStressLevel');
    stressLevelElement.setAttribute('data-stress-key', stressKey);
    // Setting text here in English, localization updates it immediately after
    stressLevelElement.textContent = stressKey; 
    document.getElementById('irrigationAdvice').textContent = adviceText;

    // Update bar visually
    const moistureBar = document.getElementById('moistureBar');
    if (moistureBar) {
        // Calculate percentage relative to field capacity
        const moisturePercent = Math.min(100, (moisture / capacity) * 100);
        moistureBar.style.width = `${moisturePercent}%`;
        
        // Color code the bar based on stress level
        if (stressKey === 'Severe Stress') moistureBar.style.backgroundColor = '#F44336'; // Red
        else if (stressKey === 'Mild Stress') moistureBar.style.backgroundColor = '#FFC107'; // Yellow
        else moistureBar.style.backgroundColor = '#2196F3'; // Blue (Optimal)
    }


    // 4. Crop Progress
    const cropData = DEMO_DATA.crop;
    document.getElementById('daysSinceSowing').querySelector('span').textContent = cropData.daysSinceSowing;
    document.getElementById('cropStage').querySelector('span').textContent = cropData.stage;
    const cropProgressBar = document.getElementById('cropProgressBar');
    if (cropProgressBar) cropProgressBar.style.width = `${cropData.progress}%`;

    // 5. Yield & Insights
    document.getElementById('projectedYield').querySelector('span').textContent = cropData.yield;
    
    // 6. Soil Health & Market
    document.getElementById('npkLevels').textContent = DEMO_DATA.soil.npk;
    document.getElementById('phLevel').textContent = DEMO_DATA.soil.ph;
    document.getElementById('currentPrice').textContent = DEMO_DATA.market.price;
    
    // 7. Market Advice
    const sellAdviceElement = document.getElementById('sellAdvice');
    const sellKey = DEMO_DATA.market.sellAdviceKey; 
    let adviceTextKey = 'Market price is low';
    if (sellKey === 1) adviceTextKey = 'Sell now for best margin';
    else if (sellKey === 2) adviceTextKey = 'Hold for 3 more days';

    sellAdviceElement.setAttribute('data-advice-key', sellKey);
    // Localization will handle text update
    sellAdviceElement.textContent = locale.sell_advice[adviceTextKey]; 
    sellAdviceElement.style.color = sellKey === 1 ? 'var(--primary-color)' : (sellKey === 3 ? '#F44336' : '#FFC107');


    // 8. Daily Tip (Randomized)
    const today = new Date().getDay();
    document.getElementById('dailyTip').textContent = DEMO_DATA.tips[today % DEMO_DATA.tips.length];

    // Reapply language to update all newly set labels
    updateContentLanguage(currentLang);
    
    // 9. Initialize Charts
    const initChart = (id, data) => {
        const chartElement = document.getElementById(id);
        if (chartElement && chartElement.chart) chartElement.chart.destroy();
        const ctx = chartElement.getContext('2d');
        chartElement.chart = new Chart(ctx, data);
    };
    
    // Yield Chart
    initChart('yieldChart', {
        type: 'line', data: {
            labels: ['May', 'Jun', 'Jul', 'Aug', 'Sep'],
            datasets: [{ label: 'Expected Yield (tons)', data: [1.2, 1.5, 1.8, 2.0, 2.1], borderColor: '#0A6640', tension: 0.2, fill: true, backgroundColor: 'rgba(10, 102, 64, 0.1)', pointRadius: 5, pointHoverRadius: 8 }]
        }, options: { 
            responsive: true, maintainAspectRatio: false, 
            plugins: { legend: { display: false } }, 
            scales: { y: { beginAtZero: true } }
        }
    });

    // Soil Chart
    initChart('soilChart', {
        type: 'bar', data: {
            labels: ['Nitrogen', 'Phosphorus', 'Potassium'],
            datasets: [{ 
                label: 'NPK Levels (kg/ha)', 
                data: [120, 60, 80], 
                backgroundColor: ['#2E8B57', '#FFD700', '#2196F3'] 
            }]
        }, options: { 
            responsive: true, maintainAspectRatio: false, 
            plugins: { legend: { display: false } },
            scales: { y: { beginAtZero: true } } 
        }
    });

    // Market Chart
    initChart('marketChart', {
        type: 'line', data: {
            labels: DEMO_DATA.market.labels,
            datasets: [{ label: 'Market Price (тВ╣/quintal)', data: DEMO_DATA.market.chart, borderColor: '#2196F3', tension: 0.4, pointBackgroundColor: (ctx) => ctx.dataIndex === 5 ? 'red' : '#2196F3', pointRadius: 5, pointHoverRadius: 8 }]
        }, options: { 
            responsive: true, maintainAspectRatio: false, 
            plugins: { legend: { display: false } },
            scales: { y: { beginAtZero: false } }
        }
    });
}

// ----------------------------------------------------------------------
// --- INITIALIZE CROP LIBRARY PAGE ---
// ----------------------------------------------------------------------

function initializeCropLibrary() {
    const cropGrid = document.querySelector('#crop-library-page .crop-grid');
    if (!cropGrid) return;
    
    // Clear existing content if any
    cropGrid.innerHTML = ''; 

    DEMO_DATA.cropLibrary.forEach(crop => {
        // Mock localization keys for the description and link text based on the English name
        const cardHtml = `
            <div class="crop-card">
                <div class="emoji">${crop.emoji}</div>
                <h3 data-en="${crop.name}" 
                    data-hi="${crop.name === 'Rice' ? 'рдЪрд╛рд╡рд▓' : crop.name === 'Maize' ? 'рдордХреНрдХрд╛' : crop.name === 'Potatoes' ? 'рдЖрд▓реВ' : crop.name === 'Soybeans' ? 'рд╕реЛрдпрд╛рдмреАрди' : crop.name === 'Coconut' ? 'рдирд╛рд░рд┐рдпрд▓' : crop.name === 'Rubber' ? 'рд░рдмрд░' : crop.name === 'Cardamom' ? 'рдЗрд▓рд╛рдпрдЪреА' : 'рдЪрд╛рдп'}" 
                    data-ta="${crop.name === 'Rice' ? 'роЕро░ро┐роЪро┐' : crop.name === 'Maize' ? 'роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН' : crop.name === 'Potatoes' ? 'роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ' : crop.name === 'Soybeans' ? 'роЪрпЛропро╛рокрпАройрпНро╕рпН' : crop.name === 'Coconut' ? 'родрпЗроЩрпНроХро╛ропрпН' : crop.name === 'Rubber' ? 'ро░рокрпНрокро░рпН' : crop.name === 'Cardamom' ? 'роПро▓роХрпНроХро╛ропрпН' : 'родрпЗропро┐ро▓рпИ'}" 
                    data-ma="${crop.name === 'Rice' ? 'р┤ир╡Жр┤▓р╡Нр┤▓р╡Н' : crop.name === 'Maize' ? 'р┤Ър╡Лр┤│р┤В' : crop.name === 'Potatoes' ? 'р┤Йр┤░р╡Бр┤│р┤Хр╡Нр┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н' : crop.name === 'Soybeans' ? 'р┤╕р╡Лр┤пр┤╛р┤мр╡Ар╡╗р┤╕р╡Н' : crop.name === 'Coconut' ? 'р┤др╡Жр┤Щр╡Нр┤Щр╡Н' : crop.name === 'Rubber' ? 'р┤▒р┤мр╡Нр┤мр╡╝' : crop.name === 'Cardamom' ? 'р┤Пр┤▓р┤В' : 'р┤Ър┤╛р┤п'}">
                    ${crop.name}
                </h3>
                <p data-en="${crop.description}">${crop.description}</p>
                <a href="#" class="action-button small-btn" data-en="View Details" data-hi="рд╡рд┐рд╡рд░рдг рджреЗрдЦреЗрдВ" data-ta="ро╡ро┐ро╡ро░роЩрпНроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН" data-ma="р┤╡р┤┐р┤╢р┤жр┤╛р┤Вр┤╢р┤Щр╡Нр┤Щр╡╛ р┤Хр┤╛р┤гр╡Бр┤Х">View Details</a>
            </div>
        `;
        cropGrid.insertAdjacentHTML('beforeend', cardHtml);
    });
}

// ----------------------------------------------------------------------
// --- INITIALIZE RESOURCES PAGE ---
// ----------------------------------------------------------------------

function initializeResources() {
    const resourcesList = document.querySelector('#resources-page .resources-list');
    if (!resourcesList) return;

    // Clear existing content if any
    resourcesList.innerHTML = ''; 

    DEMO_DATA.resources.forEach(resource => {
        // Determine if it's a diagnosis link or general link
        const clickAction = resource.pageId ? `onclick="showPage('${resource.pageId}')"` : '';
        
        // Mock localization keys for the title and link text
        const titleHi = resource.title === 'Government Subsidies' ? 'рд╕рд░рдХрд╛рд░реА рд╕рдмреНрд╕рд┐рдбреА' : resource.title === 'Soil Testing Labs' ? 'рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдкреНрд░рдпреЛрдЧрд╢рд╛рд▓рд╛рдПрдВ' : resource.title === 'Market Price Data' ? 'рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп рдбреЗрдЯрд╛' : resource.title === 'Community Forum' ? 'рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдордВрдЪ' : 'рдХреАрдЯ рдФрд░ рд░реЛрдЧ рдирд┐рджрд╛рди';
        const linkHi = resource.linkText === 'Learn More' ? 'рдФрд░ рдЬрд╛рдиреЗрдВ' : resource.linkText === 'Find a Lab' ? 'рд▓реИрдм рдЦреЛрдЬреЗрдВ' : resource.linkText === 'View Prices' ? 'рдХреАрдорддреЗрдВ рджреЗрдЦреЗрдВ' : resource.linkText === 'Join Community' ? 'рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ' : 'рдирд┐рджрд╛рди рдХрд░реЗрдВ';

        const cardHtml = `
            <div class="resource-card">
                <div class="emoji">${resource.emoji}</div>
                <h3 data-en="${resource.title}" data-hi="${titleHi}">
                    ${resource.title}
                </h3>
                <p data-en="${resource.description}">${resource.description}</p>
                <a href="#" class="action-button small-btn" 
                   data-en="${resource.linkText}" 
                   data-hi="${linkHi}"
                   ${clickAction}>
                   ${resource.linkText}
                </a>
            </div>
        `;
        resourcesList.insertAdjacentHTML('beforeend', cardHtml);
    });
}

// ----------------------------------------------------------------------
// --- CORE LOGIC: AI ASSISTANT ---
// ----------------------------------------------------------------------

function initializeAiAssistant() {
    const chatBox = document.getElementById("chatBox");
    const textInput = document.getElementById("textInput");
    const sendBtn = document.getElementById("sendBtn");
    const voiceBtn = document.getElementById("voiceBtn");
    const aiStatus = document.getElementById("aiStatus");
    const currentLang = localStorage.getItem('currentLanguage') || 'en';
    
    // Clear chat on re-initialization (e.g., language change)
    if (chatBox) chatBox.innerHTML = '';

    const farmerProfile = JSON.parse(localStorage.getItem("smartHarvestersProfile")) || {
        name: "Demo Farmer", crop: "Rice", location: "Thrissur, Kerala"
    };
    const { name: farmerName, crop: farmerCrop, location: farmerLocation } = farmerProfile;
    const langName = { en: 'English', hi: 'Hindi', ta: 'Tamil', ma: 'Malayalam' }[currentLang];

    function addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add(`${sender}-message`);
        const bubble = document.createElement('div');
        bubble.classList.add('message-bubble');
        text = text.replace(/<script\b[^>]*>([\s\S]*?)<\/script>/gim, "")
                     .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        
        const p = document.createElement('p');
        p.innerHTML = text;

        if (sender === 'ai') {
            const avatar = document.createElement('span');
            avatar.classList.add('ai-avatar');
            avatar.textContent = 'ЁЯСйтАНЁЯМ╛';
            messageDiv.appendChild(avatar);

            // Add TTS button
            const playBtn = document.createElement('button');
            playBtn.classList.add('tts-play-btn');
            playBtn.innerHTML = '<span class="material-icons" style="font-size: 1.5rem;">volume_up</span>';
            
            playBtn.addEventListener('click', async () => {
                const originalIcon = playBtn.innerHTML;
                const originalColor = playBtn.style.color;
                
                // Set loading state
                playBtn.innerHTML = '<span class="material-icons spin-animation" style="font-size: 1.5rem;">sync</span>';
                playBtn.style.color = '#FFD700'; 
                playBtn.disabled = true;

                const audioUrl = await getTtsAudio(p.textContent, localStorage.getItem('currentLanguage') || 'en');
                
                playBtn.innerHTML = originalIcon;
                playBtn.style.color = originalColor;
                playBtn.disabled = false;

                if (audioUrl) {
                    const audio = new Audio(audioUrl);
                    window.currentPlayingAudio = audio; // Global reference for pausing
                    
                    audio.onplaying = () => { playBtn.style.color = '#F44336'; }; // Red while playing
                    audio.onended = () => { 
                        playBtn.style.color = originalColor; 
                        window.currentPlayingAudio = null;
                        URL.revokeObjectURL(audioUrl);
                    };
                    
                    audio.play().catch(e => {
                        console.error("Audio playback failed:", e);
                        // Fallback to original state on error
                        playBtn.style.color = originalColor; 
                        window.currentPlayingAudio = null;
                        URL.revokeObjectURL(audioUrl);
                    });
                } else {
                    console.warn("Could not retrieve audio URL.");
                }
            });

            bubble.appendChild(p);
            bubble.appendChild(playBtn);
            bubble.style.backgroundColor = 'var(--primary-light)';
            bubble.style.color = 'white';
            
        } else {
            bubble.appendChild(p);
        }
        
        messageDiv.appendChild(bubble);
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.classList.add('ai-message');
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = `<span class="ai-avatar">ЁЯСйтАНЁЯМ╛</span><div class="message-bubble typing-indicator"><span class="typing-dot"></span><span class="typing-dot"></span><span class="typing-dot"></span></div>`;
        chatBox.appendChild(typingDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
        if (aiStatus) {
            aiStatus.textContent = "Typing...";
            aiStatus.classList.remove('online');
            aiStatus.classList.add('typing');
        }
    }
    function removeTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
        if (aiStatus) {
            aiStatus.textContent = "Online";
            aiStatus.classList.remove('typing');
            aiStatus.classList.add('online');
        }
    }

    // --- REFACTORED AI RESPONSE FUNCTION ---
    async function getAiResponse(query) {
        if (!GEMINI_API_KEY || GEMINI_API_KEY.length < 10) {
            return "Vera: I can't talk right now. Please update the **GEMINI_API_KEY** in the script to enable the AI assistant.";
        }
        
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_TEXT_MODEL}:generateContent?key=${GEMINI_API_KEY}`;
        
        const systemPrompt = `You are Vera, a helpful and highly knowledgeable **Precision Farming AI Assistant** for Smart Harvesters. You specialize in crops common to India, like Rice, Rubber, and Cardamom, focusing on sustainability, soil health, and market resilience. The user is ${farmerName}, located near ${farmerLocation}, and is growing ${farmerCrop}. You must answer concisely, using expert-level knowledge, and ONLY in the ${langName} language.`;
        
        const payload = {
            contents: [{ parts: [{ text: query }] }],
            tools: [{ "google_search": {} }], // Enable Google Search grounding
            systemInstruction: {
                parts: [{ text: systemPrompt }]
            },
        };

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            
            if (!response.ok) throw new Error(`API error: ${response.statusText}`);
            const data = await response.json();
            
            let responseText = data.candidates?.[0]?.content?.parts?.[0]?.text;
            
            // Add sources if available
            const groundingMetadata = data.candidates?.[0]?.groundingMetadata;
            if (groundingMetadata && groundingAttributions) {
                const sources = groundingMetadata.groundingAttributions
                    .map(attribution => attribution.web?.title)
                    .filter(title => title);
                
                if (sources.length > 0) {
                    const uniqueSources = Array.from(new Set(sources)).slice(0, 3);
                    const sourceText = uniqueSources.join(', ');
                    responseText += `\n\n_(Sources: ${sourceText})_`;
                }
            }

            if (responseText) return responseText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            return "Vera: I'm sorry, I couldn't generate a response. The API returned an invalid format.";
        } catch (error) {
            console.error("Error fetching AI response:", error);
            return "Vera: I'm having trouble connecting right now. Please check your API key or try again later.";
        }
    }
    // --- END REFACTORED AI RESPONSE FUNCTION ---

    async function processQuery(query) {
        if (!query.trim()) return;
        addMessage(query, 'user');
        textInput.value = '';
        showTypingIndicator();
        const aiResponse = await getAiResponse(query);
        removeTypingIndicator();
        addMessage(aiResponse, 'ai');
    }

    // --- SpeechRecognition Logic (Removed voiceBtn logic from function for cleanliness) ---
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition && voiceBtn) {
        const recognition = new SpeechRecognition();
        const recognizerLang = currentLang === 'hi' ? 'hi-IN' : (currentLang === 'ta' ? 'ta-IN' : (currentLang === 'ma' ? 'ml-IN' : 'en-IN'));
        recognition.lang = recognizerLang;
        recognition.continuous = false;
        recognition.interimResults = false;

        voiceBtn.addEventListener('click', () => {
            try {
                recognition.start();
                aiStatus.textContent = "Listening...";
                aiStatus.classList.remove('online');
                aiStatus.classList.add('typing');
                voiceBtn.style.color = '#F44336';
            } catch (e) {
                console.error("Speech recognition already running or not allowed.", e);
                aiStatus.textContent = "Error";
                voiceBtn.style.color = 'var(--primary-color)';
            }
        });
        
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            if (textInput) textInput.value = transcript;
            processQuery(transcript);
        };
        
        recognition.onend = () => {
            voiceBtn.style.color = 'var(--primary-color)';
        };
        
        recognition.onerror = (event) => {
            console.error("Speech recognition error:", event.error);
            aiStatus.textContent = "Online";
            aiStatus.classList.remove('typing');
            aiStatus.classList.add('online');
            voiceBtn.style.color = 'var(--primary-color)';
        };
    } else if (voiceBtn) {
        console.warn("Speech Recognition not supported by your browser.");
        voiceBtn.style.display = 'none';
    }


    const welcomeMessage = {
        en: `Hello ${farmerName}! I'm Vera, your personalized farm advisor. I specialize in market trends, water stress, and pest solutions. How can I help with your ${farmerCrop} farm today?`,
        hi: `рдирдорд╕реНрддреЗ ${farmerName}! рдореИрдВ рд╡реЗрд░рд╛ рд╣реВрдБ, рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ред рдореИрдВ рдмрд╛рдЬрд╛рд░ рдХреЗ рд░реБрдЭрд╛рди, рдЬрд▓ рддрдирд╛рд╡ рдФрд░ рдХреАрдЯ рд╕рдорд╛рдзрд╛рди рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реВрдБред рдореИрдВ рдЖрдЬ рдЖрдкрдХреЗ ${farmerCrop} рдЦреЗрдд рдореЗрдВ рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдБ?`,
        ta: `ро╡рогроХрпНроХроорпН ${farmerName}! роиро╛ройрпН ро╡рпЗро░ро╛, роЙроЩрпНроХро│рпН родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ рокрогрпНрогрпИ роЖро▓рпЛроЪроХро░рпН. роЪроирпНродрпИ рокрпЛроХрпНроХрпБроХро│рпН, роирпАро░рпН роЕро┤рпБродрпНродроорпН рооро▒рпНро▒рпБроорпН рокрпВроЪрпНроЪро┐ родрпАро░рпНро╡рпБроХро│ро┐ро▓рпН роиро╛ройрпН роиро┐рокрпБрогродрпНродрпБро╡роорпН рокрпЖро▒рпНро▒ро╡ро│рпН. роЗройрпНро▒рпБ роЙроЩрпНроХро│рпН ${farmerCrop} рокрогрпНрогрпИроХрпНроХрпБ роиро╛ройрпН роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?`,
        ma: `р┤╣р┤▓р╡Л ${farmerName}! р┤Юр┤╛р╡╗ р┤╡р╡Зр┤░, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤Йр┤кр┤жр╡Зр┤╖р╡Нр┤Яр┤╛р┤╡р╡Н. р┤╡р┤┐р┤кр┤гр┤┐ р┤кр╡Нр┤░р┤╡р┤гр┤др┤Хр╡╛, р┤Ьр┤▓р┤Хр╡Нр┤╖р┤╛р┤ор┤В, р┤Хр╡Ар┤Яр┤кр┤░р┤┐р┤╣р┤╛р┤░р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр┤┐р╡╜ р┤Юр┤╛р╡╗ р┤╡р┤┐р┤жр┤Чр╡Нр┤жр╡Нр┤зр┤пр┤╛р┤гр╡Н. р┤Зр┤ир╡Нр┤ир╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж ${farmerCrop} р┤Хр╡Гр┤╖р┤┐р┤пр┤┐р┤Яр┤др╡Нр┤др┤┐р╡╜ р┤Юр┤╛р╡╗ р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤В?`
    };

    // Only add welcome message if the chat is truly empty (prevents duplicates on language change)
    if (chatBox.children.length === 0) {
        addMessage(welcomeMessage[currentLang] || welcomeMessage.en, 'ai');
    }
    
    if (sendBtn) sendBtn.addEventListener('click', () => processQuery(textInput.value));
    if (textInput) textInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') processQuery(textInput.value);
    });
}

// ----------------------------------------------------------------------
// --- CORE LOGIC: DIAGNOSIS TOOL ---
// ----------------------------------------------------------------------

function handleDiagnosis(e) {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        const imgPreview = document.getElementById('imagePreview');
        imgPreview.src = e.target.result;
        imgPreview.style.display = 'block';
        document.getElementById('diagnosisPlaceholder').style.display = 'none';
        
        // Show loading and hide previous result
        const loading = document.getElementById('diagnosisLoading');
        const resultCard = document.getElementById('diagnosisResult');
        loading.style.display = 'block';
        resultCard.style.display = 'none';

        // --- Mock Diagnosis Logic (Simulating AI processing) ---
        setTimeout(() => {
            const profile = JSON.parse(localStorage.getItem("smartHarvestersProfile")) || { crop: 'Default' };
            const cropType = profile.crop;
            const diagnosisKey = ['Pest', 'Disease', 'Default'][Math.floor(Math.random() * 3)];
            
            const diagnosisResult = DEMO_DATA.diagnosis[cropType] ? 
                                        (DEMO_DATA.diagnosis[cropType][diagnosisKey] || DEMO_DATA.diagnosis.Default) : 
                                        DEMO_DATA.diagnosis.Default;
            
            const currentLang = localStorage.getItem('currentLanguage') || 'en';
            const isDefault = diagnosisKey === 'Default';
            
            // Note: LOCALE_DATA doesn't have diagnosis names, so we use English fallback for the mock data result title
            const nameKey = isDefault ? 'Nutrient Deficiency (Nitrogen)' : diagnosisResult.name;
            const summaryText = diagnosisResult.summary;
            const treatments = diagnosisResult.treatment;

            document.getElementById('resultTitle').textContent = nameKey;
            document.getElementById('resultSummary').textContent = summaryText;
            document.getElementById('treatmentList').innerHTML = treatments.map(item => `<li>${item}</li>`).join('');

            loading.style.display = 'none';
            resultCard.style.display = 'block';
            
            // Reapply language for titles/buttons
            updateContentLanguage(currentLang);
        }, 2500); // 2.5 second delay to simulate API call
    };
    reader.readAsDataURL(file);
}

// ----------------------------------------------------------------------
// --- EVENT LISTENERS ---
// ----------------------------------------------------------------------

document.addEventListener('DOMContentLoaded', () => {
    // Initial language setup
    const initialLang = localStorage.getItem('currentLanguage') || 'en';
    
    // Set up language selector event listeners
    if (languageSelectorDashboard) languageSelectorDashboard.addEventListener('change', (e) => showPage('dashboard-page'));
    if (languageSelectorAi) languageSelectorAi.addEventListener('change', (e) => initializeAiAssistant());

    // Core Auth/Session Management
    checkUserSession();

    // Modals & Links
    if (signupBtn) signupBtn.addEventListener('click', (e) => { e.preventDefault(); onboardingModal.classList.add("active"); });
    if (heroSignupBtn) heroSignupBtn.addEventListener('click', (e) => { e.preventDefault(); onboardingModal.classList.add("active"); });
    if (loginBtn) loginBtn.addEventListener('click', (e) => { e.preventDefault(); loginModal.classList.add("active"); });
    if (logoutBtn) logoutBtn.addEventListener('click', handleLogout);
    if (logoutBtnApp) logoutBtnApp.addEventListener('click', handleLogout);
    if (onboardingForm) onboardingForm.addEventListener("submit", handleSignUp);
    if (loginForm) loginForm.addEventListener('submit', handleLogin);
    
    // Diagnosis Tool Listener
    const fileInputDiagnosis = document.getElementById('fileInputDiagnosis');
    if(fileInputDiagnosis) fileInputDiagnosis.addEventListener('change', handleDiagnosis);
});
